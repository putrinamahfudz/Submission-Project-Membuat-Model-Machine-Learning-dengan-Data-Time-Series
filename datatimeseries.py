# -*- coding: utf-8 -*-
"""DataTimeSeries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ktIE6Pl2APjVyr-KZGYFTupIF9SMR8DQ

## **PUTRI NUR AINI MAHFUDZ (M203Y0411)**

## **Membuat Model Machine Learning dengan Data Time Series**

---

## Berikut ini Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series yang saya kerjakan dengan memenuhi kriteria submission yang ada.

Dataset didapatkan dari : https://www.kaggle.com/datasets/grubenm/austin-weather

## Steps:

### 1. Impor library
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

"""### 2. Ubah dataset menjadi dataframe, lalu panggil fungsi head() untuk menampilkan sampel teratas pada dataset"""

data_train = pd.read_csv('austin_weather.csv')
data_train.head()

"""### 3. Cek apakah ada nilai yang hilang dari dataset menggunakan fungsi isnull()

"""

data_train.isnull().sum()

"""### 4. Pastikan dataset memiliki lebih dari 1000 sampel data"""

data_train.tail()

"""### 5. Buat plot dari data menggunakan fungsi plot dari library matplotlib"""

dates = data_train['Date'].values
temp  = data_train['TempAvgF'].values
 
 
plt.figure(figsize=(15,5))
plt.plot(dates, temp)
plt.title('Temperature average',
          fontsize=20);

"""### 6.  Lakukan pemisahan data menjadi data latih dan data testing"""

from sklearn.model_selection import train_test_split
date_latih, date_test, temp_latih, temp_test = train_test_split(dates, temp, test_size=0.2, shuffle=False)

"""### 7. Inisiasi fungsi windowed dataset"""

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

"""### 8. Memanggil fungsi windowed dataset dan membangun model menggunakan model sequential"""

train_set = windowed_dataset(temp_latih, window_size=60, batch_size=100, shuffle_buffer=1000)
test_set = windowed_dataset(temp_test, window_size=60, batch_size=100, shuffle_buffer=1000)
model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(30, return_sequences=True,  input_shape=[None, 1]),
  tf.keras.layers.LSTM(30),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

"""### 9. Menghitung nilai 10% MAE """

minMae = (data_train['TempAvgF'].max() - data_train['TempAvgF'].min()) * 10/100
print(minMae)

"""### 10. Menerapkan Callback, training akan berhenti jika sudah menunjukkan <10%"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if (logs.get('mae')<minMae) & (logs.get('val_mae')<minMae):
      print('\nMAE sudah mencapai <10%!')
      self.model.stop_training = True

callbacks = myCallback()

"""### 11. Compile dan lakukan training pada model"""

optimizer = tf.keras.optimizers.SGD(learning_rate=1.000e-04, momentum=0.9)
model.compile(
    loss=tf.keras.losses.Huber(),
    optimizer=optimizer,
    metrics=['mae']
    )
history = model.fit(
    train_set,
    epochs=200,
    validation_data=test_set,
    verbose=2,
    callbacks=[callbacks],
    )

"""### 12. Membuat plot loss dan akurasi pada saat training dan validation"""

mae = history.history['mae']
val_mae = history.history['val_mae']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(1, len(mae) + 1)

plt.plot(epochs, mae, 'bo', label='Training MAE')
plt.plot(epochs, val_mae, 'b', label='Validation MAE')
plt.title('Training & Validation MAE')
plt.legend()
plt.figure()
plt.show()

plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training & Validation Loss')
plt.legend()
plt.figure()
plt.show()

"""## **Terimakasih.**

## **Submission project kelas Belajar Pengembangan Machine Learning - 2022** 
"""